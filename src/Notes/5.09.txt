asdfasdfasdf# 오버로딩과 오버라이딩
	<오버로딩>
	오버로딩은 같은 이름의 함수(메소드)를 여러개 정의하고, 매개변수의 타입과 개수를 다르게 하여 
	다양한 호출에 응답할 수 있게 된다. 
	Ex) 
	class OverloadingExample{
		void cat(){
			System.out.println("매개변수 없음");
    	}
    	
    	void cat(int a){
			//System.out.println("매개변수 하나");
			System.out.printf("현재 %d마리의 고양이가 있습니다.\n", %d);
			// ==> 동일한 메소드지만 
    	}
    	
    	void cat(String b){
			//System.out.println("매개변수 하나");
			System.out.printf("고양이가 있는 곳은 %s입니다.\n", %s);
    	}
	}
    ==> 호출 시 (main메소드) 
    		OverloadingExample ole = new OverloadingExample();   // ==> 이처럼 클래스명을 사용해 객체 생성 가능
    		
    		ole.cat(); // ==> 호출시 생성한 객체의 변수명으로 가능하며 점(".")을 사용하여 클래스내 메소드를 불러올수 있다.
    		ole.cat(4);		// ==> 현재 4마리의 고양이가 있습니다. 가 출력됨
    		ole.cat("강남동물병원"); // ==> 고양이가 있는 곳은 강남동물병원입니다. 가 출력됨
    
    	
    <오버라이딩>
    	상위 클래스가 가지고 있는 맴버변수가 하위 클래스로 상속되는 것처럼 상위 클래스가 가지고 있는 메소드도 하위 클래스로
    	상속되어 하위 클래스에 사용할 수 있습니다. 또한, 하위클래스에서 메소드를 재정의해서 사용가능하다.
    	(메소드의 이름, 매개변수, 반환형이 모두 동일한 상황에서 상속받은 메소드를 덮어쓴다고 생각하면 된다.)
    	--> 부모클래스(상위클래스)의 메소드는 무시하고, 자식클래스의(하위클래스)의 메소드를 사용하겠다.
    	
    	!!!! 아직 상속, 인터페이스, 추상클래스에 대한 개념을 배우지 못해 완벽한 이해에 어려움이 존재함. 정리 후 적당한 개념만 이해
    	Ex) 
    	class Woman{ //부모클래스
		    public String name;
		    public int age;
		    
		    //info 메서드
		    public void info(){
		        System.out.println("여자의 이름은 "+name+", 나이는 "+age+"살입니다.");
		    }
		}
	 
		class Job extends Woman{ 		//Woman클래스(부모클래스)를 상속받음 : 
		 
		    String job;
		    
		    public void info() {	//부모(Woman)클래스에 있는 info()메서드를 재정의
		        super.info();
		        System.out.println("여자의 직업은 "+job+"입니다.");
			    }
		}
		 
		public class OverTest {
		    public static void main(String[] args) {
		        
		        //Job 객체 생성
		        Job job = new Job();
		        
		        //변수 설정
		        job.name = "유리";
		        job.age = 30;
		        job.job = "프로그래머";
		        
		        //호출
		        job.info();
		        
		    }
		}
    	===> 여자의 직업은 프로그래머입니다. 가 출력됨
    	
    	
    	
    	
 #  Arrays 클래스의 모든 메소드는 static으로 설정되어있다. 
 	==> static 이란?
 	
 	
 	
# 배열이 작성된 코드 실행중 ArraysIndexOutofBoundsException 란 오류가 발생하면 
	해당 배열에서 범위를 벗어난 index를 사용했을때 발생하는데 이 오류는 컴파일 과정에서 오류나지 않고
	실행 과정에서 오류가 발생한다. 
	Ex)
	int[] arr = {1,2,4,5,6};		// 길이 5의 배열을 선언
	arr[5] = 3;		// 길이 5인 배열은 index의 최대값이 4이며, 그 이상의값인 5에 값을 설정하고 싶지만 불가능하다.
	== > 배열의 길이를 늘리거나 추가하고 싶다면, 다른 타입을 사용하거나 배열을 복사해줘야 한다.
  
  
# 배열의 복사
	int[] oriArr = new int[] {11,12,13,14,15};
	int[] copyArr = new int[2];
	System.out.println(Arrays.toString(copyArr));		// ==> [0,0] 길이 2인 배열 생성
	copyArr = oriArr; // 배열 복사
	System.out.println(Arrays.toString(copyArr));		// ==> [11,12,13,14,15]
	oriArr[0] = 0; // 원본 배열의 첫번째 요소 수정 
	System.out.println(Arrays.toString(oriArr));		// ==> [0,12,13,14,15]
	System.out.println(Arrays.toString(copyArr));		// ==> [0,12,13,14,15]
	// ==> 수정작업을 진행하지 않은 copyArr의 결과도 oriArr의 결과와 동일하게 출력된다.
	
	System.out.println(oriArr);		// ==> [I@15db9742  주소값
	// copyArr는 oriArr의 요소를 복사하는것이 아닌 주소값을 복사하기 때문에 
	// 호출 되었을때 oriArr의 주소값을 찾아가 값을 출력하기 때문에 원본 배열만 수정해도
	// 복사배열도 같이 수정된 값을 출력하게 되는것이다.
	// 주소복사를 얕은복사(shallow copys)라 한다.
	
# 복사의 방법 
	Arrays.copyOf();		----->		깊은 복사 
	clone(); ==> Object클래스의 clone() 메소드    ----->		깊은 복사
	==> 각 사용방식이 다름 매개변수 등...
	1)for 문
	2)Object.clone() ==> 1차원 배열은 깊은 복사, 2차원 배열시 얕은 복사
	3)Arrays.copyOf(원본배열, 길이);
	4)Arrays.copyOfRange(원본배열, 시작인덱스, 끝인덱스+1);
	5)System.arraycopy(원본배열, 원본배열시작인덱스, 새배열, 새배열시작인덱스, 복사할 개수);
	
	
	
!! 얕은복사, 깊은 복사
	==> 얕은 복사는 주소값 자체를 복사
			깊은 복사는 for문 등을 사용하여 요소값 자체를 복사한다. 
	얕은복사는 복사 이후에 원본에 영향을 받으나, 깊은복사는 복사 이후에 원본에 영향을 받지 않는다.
	

	
	
	
	
# p.477 객체문자정보에 toString 메소드가 어떻게 값을 리턴하는가 나옴

